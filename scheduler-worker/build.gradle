plugins {
  id 'java'
  id 'application'
  id 'com.github.node-gradle.node' version '5.0.0'
  id 'jacoco'
  id 'maven-publish'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }

  withJavadocJar()
  withSourcesJar()
}

node {
  nodeProjectDir = file("${project.projectDir.toPath().resolve("scheduling-dsl-compiler")}")
  version = '20.12.1'
  download = true
}

task deleteConstraintsTypescript(type: Delete) {
  delete project.projectDir.toPath().resolve('scheduling-dsl-compiler/src/libs/constraints')
}

task copyConstraintsTypescript(type: Copy) {
  dependsOn deleteConstraintsTypescript
  dependsOn ':merlin-server:assembleConstraintsDSLCompiler'
  from rootDir.toPath().resolve('merlin-server/constraints-dsl-compiler/src/libs')
  into project.projectDir.toPath().resolve('scheduling-dsl-compiler/src/libs/constraints')
}

clean {
  dependsOn deleteConstraintsTypescript
}

task assembleSchedulingDSLCompiler(type: NpmTask) {
  dependsOn copyConstraintsTypescript
  dependsOn processResources
  dependsOn npmInstall
  args = ['--silent', 'run', 'build']
  inputs.files('package.json', 'package-lock.json', 'tsconfig.json')
  inputs.dir('src')
}

task generateDocumentation(type: NpmTask) {
  dependsOn npmInstall
  dependsOn processResources
  dependsOn copyConstraintsTypescript
  dependsOn assembleSchedulingDSLCompiler
  args = ['--silent', 'run', 'generate-doc']
  inputs.files('package.json', 'package-lock.json', 'tsconfig.json')
  inputs.dir('src')
}

task cleanDocsFromDocsDir(type: Delete) {
  delete rootDir.toPath().resolve('docs/edsl-api-docs/scheduling-edsl-api/develop')
}

task publishDocs {
  dependsOn cleanDocsFromDocsDir
  dependsOn generateDocumentation
}

assemble {
  dependsOn assembleSchedulingDSLCompiler
  dependsOn generateDocumentation
}

test {
  dependsOn nodeSetup
  dependsOn assembleSchedulingDSLCompiler
  useJUnitPlatform()

  testLogging {
      exceptionFormat 'full'
  }

  // Add node bin directory to PATH, helps CI/CD services without node installed
  environment 'NODE_PATH', node.computedNodeDir.get().toString().concat("/bin/node")

  environment "SCHEDULING_DSL_COMPILER_ROOT", projectDir.toPath().resolve('scheduling-dsl-compiler')
  environment "SCHEDULING_DSL_COMPILER_COMMAND", './build/main.js'

  dependsOn ":examples:banananation:assemble"
  dependsOn ":examples:minimal-mission-model:assemble"
  environment 'AERIE_ROOT', rootDir.toString()
}

jacocoTestReport {
  dependsOn test
  reports {
    xml.required = true
  }
}

application {
  mainClass = 'gov.nasa.jpl.aerie.scheduler.worker.SchedulerWorkerAppDriver'
  applicationDefaultJvmArgs = ['-Xmx22g']
}

// Link references to standard Java classes to the official Java 11 documentation.
javadoc.options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
javadoc.options.links 'https://commons.apache.org/proper/commons-lang/javadocs/api-3.9/'
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

dependencies {
  implementation project(':merlin-driver')
  implementation project(':type-utils')
  implementation project(':scheduler-driver')
  implementation project(':scheduler-server')
  implementation project(':parsing-utilities')
  implementation project(':constraints')

  implementation 'io.javalin:javalin:5.6.3'
  implementation 'org.slf4j:slf4j-simple:2.0.7'
  implementation 'org.eclipse:yasson:3.0.3'
  implementation 'org.postgresql:postgresql:42.6.1'
  implementation 'org.apache.commons:commons-collections4:4.4'
  implementation 'com.zaxxer:HikariCP:5.0.1'

  testImplementation project(':examples:foo-missionmodel')
  testImplementation testFixtures(project(':scheduler-server'))
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'

  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

publishing {
  publications {
    library(MavenPublication) {
      version = findProperty('publishing.version')
      from components.java
    }
  }

  publishing {
    repositories {
      maven {
        name = findProperty("publishing.name")
        url = findProperty("publishing.url")
        credentials {
          username = System.getenv(findProperty("publishing.usernameEnvironmentVariable"))
          password = System.getenv(findProperty("publishing.passwordEnvironmentVariable"))
        }
      }
    }
  }
}
