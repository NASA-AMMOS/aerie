-- USER ROLES
-- This table is an enum-compatible table (https://hasura.io/docs/latest/schema/postgres/enums/#pg-create-enum-table)
create table metadata.user_roles(
  role text primary key,
  description text null
);
insert into metadata.user_roles(role) values ('admin'), ('user'), ('viewer');

comment on table metadata.user_roles is e''
  'A list of all the allowed Hasura roles, with an optional description per role';

-- USERS
create table metadata.users(
  id integer generated by default as identity primary key,
  username text not null unique,
  default_role text not null references metadata.user_roles
    on update cascade
    on delete restrict
);
-- Insert the default roles into the table, then change the generated status to "Always"
-- This can be changed back if we need to add more default users in the future
insert into metadata.users(id, username, default_role)
  values (-1, 'Mission Model', 'viewer'),
         (-2, 'Aerie Legacy', 'viewer');
alter table metadata.users
  alter id set generated always;

comment on table metadata.users is e''
'All users recognized by this deployment.';
comment on column metadata.users.id is e''
'The unique identifier for this user.';
comment on column metadata.users.username is e''
'The user''s username. No two users may share a username.';
comment on column metadata.users.default_role is e''
'The user''s default role for making Hasura requests.';

-- USERS ALLOWED ROLES
create table metadata.users_allowed_roles(
  user_id integer references metadata.users
    on update cascade
    on delete cascade,
  allowed_role text not null references metadata.user_roles
    on update cascade
    on delete cascade,

  primary key (user_id, allowed_role),

  constraint system_roles_have_no_allowed_roles
    check (user_id >= 0) -- negative user ids are used for system roles.
);

comment on table metadata.users_allowed_roles is e''
'An association between a user and the roles they are permitted to use for Hasura requests';

-- USERS AND ROLES VIEW
create view metadata.users_and_roles as
(
  select
    u.id as id,
    u.username as username,
    -- Roles
    u.default_role as hasura_default_role,
    array_agg(r.allowed_role) filter (where r.allowed_role is not null) as hasura_allowed_roles
  from metadata.users u
  left join metadata.users_allowed_roles r
  on r.user_id = u.id
  group by u.id
);

comment on view metadata.users_and_roles is e''
'View a user''s information with their role information';


call migrations.mark_migration_applied('18');
