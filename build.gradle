plugins {
  id 'com.github.ben-manes.versions' version '0.42.0'
}

task archiveDeployment(type: Tar) {
  destinationDirectory = file('.')
  archiveFileName = 'deployment.tar'
  into 'deployment'
  from 'deployment'
}

// Add `distributeSql` task to all subprojects with `sql/` child directory
configure(subprojects.findAll { it.projectDir.toPath().resolve('sql').toFile().exists() }) { sp ->

  // Distribute SQL as part of resource processing
  task distributeSql(type: Copy, dependsOn: 'processResources') {
    into "$rootDir/deployment/postgres-init-db/sql"
    from fileTree(dir: "${sp.projectDir}/sql", include: '**/*.sql')
  }

  // Remove distributed SQL as part of `clean` task
  task undoDistributeSql(type: Delete) {
    file("${sp.projectDir}/sql").list().each {
      delete "$rootDir/deployment/postgres-init-db/sql/$it"
    }
  }

  // Remove distributed SQL as part of `clean` tasks
  tasks.findAll { it.name == 'clean' }.each { t -> t.dependsOn undoDistributeSql }

  // Distribute SQL prior to creating deployment archive
  archiveDeployment.dependsOn distributeSql
}

subprojects {
  apply plugin: 'com.github.ben-manes.versions'

  repositories {
    // Search the local filesystem before attempting remote repositories
    flatDir { dirs "$rootDir/third-party" }
    mavenCentral()
  }

  group = 'gov.nasa.jpl.aerie'
  version = '0.10.0-SNAPSHOT'

  tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
    options.encoding = 'UTF-8'
  }

  tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
  }
}
