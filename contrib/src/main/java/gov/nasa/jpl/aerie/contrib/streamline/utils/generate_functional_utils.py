import datetime
import string
import sys
import os


UTILS_PACKAGE = 'gov.nasa.jpl.aerie.contrib.streamline.utils'
UTILS_CLASS = 'FunctionalUtils'


def main(n):
    utils_class_content = generate_functional_utils(n)
    utils_class_file_name = os.path.join(
        os.path.dirname(__file__),
        UTILS_CLASS + '.java')
    with open(utils_class_file_name, 'w') as f:
        f.write(utils_class_content)
    for i in range(4, n + 1):
        function_i_interface_content = generate_function_n_interface(i)
        function_i_interface_file_name = os.path.join(
            os.path.dirname(__file__),
            f'Function{i}.java')
        with open(function_i_interface_file_name, 'w') as f:
            f.write(function_i_interface_content)


def generate_function_n_interface(n):
    type_args = f'<{", ".join(string.ascii_uppercase[:n])}, Result>'
    arg_signature = ', '.join(
        f'{c} {c.lower()}'
        for c in string.ascii_uppercase[:n])
    return f'''package {UTILS_PACKAGE};

/**
 * {n}-argument function.
 *
 * Generated by {os.path.basename(__file__)} on {datetime.date.today().isoformat()}.
 */
public interface Function{n}{type_args} {{
    Result apply({arg_signature});
}}'''


def generate_functional_utils(n):
    curry_functions = '\n\n'.join(generate_n_arg_curry(i) for i in range(2, n + 1))
    return f'''package {UTILS_PACKAGE};

import org.apache.commons.lang3.function.TriFunction;

import java.util.function.BiFunction;
import java.util.function.Function;

/**
 * Utility functions for functional style programming.
 *
 * Generated by {os.path.basename(__file__)} on {datetime.date.today().isoformat()}
 * to support functions of up to {n} arguments.
 */
public final class {UTILS_CLASS} {{
  private {UTILS_CLASS}() {{}}

{indent(curry_functions, 2)}
}}
'''


def generate_n_arg_curry(n):
    fn_name = (
        'BiFunction' if n == 2 else
        'TriFunction' if n == 3 else
        f'Function{n}')
    type_args = f'<{", ".join(string.ascii_uppercase[:n])}, Result>'
    fn_type_args = type_args
    result_type = generate_n_arg_curried_function_type(n)
    curried_fn_args = ' -> '.join(string.ascii_lowercase[:n])
    uncurried_fn_args = ', '.join(string.ascii_lowercase[:n])
    return f'''public static {type_args} {result_type} curry({fn_name}{fn_type_args} function) {{
  return {curried_fn_args} -> function.apply({uncurried_fn_args});
}}'''


def generate_n_arg_curried_function_type(n):
    result = 'Result'
    for c in reversed(string.ascii_uppercase[:n]):
        result = f'Function<{c}, {result}>'
    return result


def indent(s, n):
    return ' ' * n + s.replace('\n', '\n' + ' ' * n)


if __name__ == '__main__':
    if '-h' in sys.argv or '--help' in sys.argv:
        print(f'''
Usage: {sys.argv[0]} N

Generates the FunctionalUtils.java file and supporting function interfaces.

Args:
      N    Integer, the maximum arity to generate support for.
''')
        exit(0)
    main(int(sys.argv[1]))
