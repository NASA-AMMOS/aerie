package gov.nasa.jpl.aerie.contrib.streamline.modeling.black_box.monads;

import gov.nasa.jpl.aerie.contrib.streamline.core.ErrorCatching;
import gov.nasa.jpl.aerie.contrib.streamline.core.Expiring;
import gov.nasa.jpl.aerie.contrib.streamline.core.monads.DynamicsMonad;
import gov.nasa.jpl.aerie.contrib.streamline.modeling.black_box.Unstructured;
import gov.nasa.jpl.aerie.contrib.streamline.utils.*;
import org.apache.commons.lang3.function.TriFunction;

import java.util.function.BiFunction;
import java.util.function.Function;

import static gov.nasa.jpl.aerie.contrib.streamline.utils.FunctionalUtils.curry;

/**
 * The applicative functor (but not a monad) formed by composing
 * {@link DynamicsMonad} with {@link UnstructuredMonad}.
 */
public final class UnstructuredDynamicsApplicative {
    private UnstructuredDynamicsApplicative() {}

    public static <A> ErrorCatching<Expiring<Unstructured<A>>> pure(A a) {
        return DynamicsMonad.pure(UnstructuredMonad.pure(a));
    }

    public static <A, B> ErrorCatching<Expiring<Unstructured<B>>> apply(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<Function<A, B>>>> f) {
        return DynamicsMonad.apply(a, DynamicsMonad.map(f, UnstructuredMonad::apply));
    }

    // Unstructured<ErrorCatching<Expiring<A>>> has a success status and expiry that can vary with time, as the dynamics are stepped forward.
    // ErrorCatching<Expiring<Unstructured<A>>> has a single success status and expiry, and only the value varies over time.
    // Since the direction required below would lose information, we can't write it in general.
    // This downgrades this structure to an applicative functor, rather than a monad.

    // private static <A> ErrorCatching<Expiring<Unstructured<A>>> distribute(Unstructured<ErrorCatching<Expiring<A>>> a) {
    // }

    // public static <A> ErrorCatching<Expiring<Unstructured<A>>> join(ErrorCatching<Expiring<Unstructured<ErrorCatching<Expiring<Unstructured<A>>>>>> a) {
    //     return DynamicsMonad.map(DynamicsMonad.join(DynamicsMonad.map(a, UnstructuredDynamicsMonad::distribute)), UnstructuredMonad::join);
    // }

    // GENERATED CODE START
    // Supplemental methods generated by generate_monad_methods.py on 2023-12-06.
    
    public static <A, B> Function<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>> apply(ErrorCatching<Expiring<Unstructured<Function<A, B>>>> f) {
      return a -> apply(a, f);
    }
    
    public static <A, B> ErrorCatching<Expiring<Unstructured<B>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, Function<A, B> f) {
      return apply(a, pure(f));
    }
    
    public static <A, B> Function<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>> map(Function<A, B> f) {
      return apply(pure(f));
    }
    
    public static <A, B, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, BiFunction<A, B, Result> function) {
      return map(a, b, curry(function));
    }
    
    public static <A, B, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, Function<A, Function<B, Result>> function) {
      return apply(b, map(a, function));
    }
    
    public static <A, B, Result> BiFunction<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(BiFunction<A, B, Result> function) {
      return (a, b) -> map(a, b, function);
    }
    
    public static <A, B, C, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, TriFunction<A, B, C, Result> function) {
      return map(a, b, c, curry(function));
    }
    
    public static <A, B, C, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, Function<A, Function<B, Function<C, Result>>> function) {
      return apply(c, map(a, b, function));
    }
    
    public static <A, B, C, Result> TriFunction<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(TriFunction<A, B, C, Result> function) {
      return (a, b, c) -> map(a, b, c, function);
    }
    
    public static <A, B, C, D, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, Function4<A, B, C, D, Result> function) {
      return map(a, b, c, d, curry(function));
    }
    
    public static <A, B, C, D, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, Function<A, Function<B, Function<C, Function<D, Result>>>> function) {
      return apply(d, map(a, b, c, function));
    }
    
    public static <A, B, C, D, Result> Function4<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function4<A, B, C, D, Result> function) {
      return (a, b, c, d) -> map(a, b, c, d, function);
    }
    
    public static <A, B, C, D, E, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, Function5<A, B, C, D, E, Result> function) {
      return map(a, b, c, d, e, curry(function));
    }
    
    public static <A, B, C, D, E, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, Function<A, Function<B, Function<C, Function<D, Function<E, Result>>>>> function) {
      return apply(e, map(a, b, c, d, function));
    }
    
    public static <A, B, C, D, E, Result> Function5<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function5<A, B, C, D, E, Result> function) {
      return (a, b, c, d, e) -> map(a, b, c, d, e, function);
    }
    
    public static <A, B, C, D, E, F, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, Function6<A, B, C, D, E, F, Result> function) {
      return map(a, b, c, d, e, f, curry(function));
    }
    
    public static <A, B, C, D, E, F, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Result>>>>>> function) {
      return apply(f, map(a, b, c, d, e, function));
    }
    
    public static <A, B, C, D, E, F, Result> Function6<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function6<A, B, C, D, E, F, Result> function) {
      return (a, b, c, d, e, f) -> map(a, b, c, d, e, f, function);
    }
    
    public static <A, B, C, D, E, F, G, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, Function7<A, B, C, D, E, F, G, Result> function) {
      return map(a, b, c, d, e, f, g, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Result>>>>>>> function) {
      return apply(g, map(a, b, c, d, e, f, function));
    }
    
    public static <A, B, C, D, E, F, G, Result> Function7<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function7<A, B, C, D, E, F, G, Result> function) {
      return (a, b, c, d, e, f, g) -> map(a, b, c, d, e, f, g, function);
    }
    
    public static <A, B, C, D, E, F, G, H, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, Function8<A, B, C, D, E, F, G, H, Result> function) {
      return map(a, b, c, d, e, f, g, h, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, H, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Function<H, Result>>>>>>>> function) {
      return apply(h, map(a, b, c, d, e, f, g, function));
    }
    
    public static <A, B, C, D, E, F, G, H, Result> Function8<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<H>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function8<A, B, C, D, E, F, G, H, Result> function) {
      return (a, b, c, d, e, f, g, h) -> map(a, b, c, d, e, f, g, h, function);
    }
    
    public static <A, B, C, D, E, F, G, H, I, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, Function9<A, B, C, D, E, F, G, H, I, Result> function) {
      return map(a, b, c, d, e, f, g, h, i, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Function<H, Function<I, Result>>>>>>>>> function) {
      return apply(i, map(a, b, c, d, e, f, g, h, function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, Result> Function9<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<H>>>, ErrorCatching<Expiring<Unstructured<I>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function9<A, B, C, D, E, F, G, H, I, Result> function) {
      return (a, b, c, d, e, f, g, h, i) -> map(a, b, c, d, e, f, g, h, i, function);
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, Function10<A, B, C, D, E, F, G, H, I, J, Result> function) {
      return map(a, b, c, d, e, f, g, h, i, j, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Function<H, Function<I, Function<J, Result>>>>>>>>>> function) {
      return apply(j, map(a, b, c, d, e, f, g, h, i, function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, Result> Function10<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<H>>>, ErrorCatching<Expiring<Unstructured<I>>>, ErrorCatching<Expiring<Unstructured<J>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function10<A, B, C, D, E, F, G, H, I, J, Result> function) {
      return (a, b, c, d, e, f, g, h, i, j) -> map(a, b, c, d, e, f, g, h, i, j, function);
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, Function11<A, B, C, D, E, F, G, H, I, J, K, Result> function) {
      return map(a, b, c, d, e, f, g, h, i, j, k, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Function<H, Function<I, Function<J, Function<K, Result>>>>>>>>>>> function) {
      return apply(k, map(a, b, c, d, e, f, g, h, i, j, function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, Result> Function11<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<H>>>, ErrorCatching<Expiring<Unstructured<I>>>, ErrorCatching<Expiring<Unstructured<J>>>, ErrorCatching<Expiring<Unstructured<K>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function11<A, B, C, D, E, F, G, H, I, J, K, Result> function) {
      return (a, b, c, d, e, f, g, h, i, j, k) -> map(a, b, c, d, e, f, g, h, i, j, k, function);
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, Function12<A, B, C, D, E, F, G, H, I, J, K, L, Result> function) {
      return map(a, b, c, d, e, f, g, h, i, j, k, l, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Function<H, Function<I, Function<J, Function<K, Function<L, Result>>>>>>>>>>>> function) {
      return apply(l, map(a, b, c, d, e, f, g, h, i, j, k, function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, Result> Function12<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<H>>>, ErrorCatching<Expiring<Unstructured<I>>>, ErrorCatching<Expiring<Unstructured<J>>>, ErrorCatching<Expiring<Unstructured<K>>>, ErrorCatching<Expiring<Unstructured<L>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function12<A, B, C, D, E, F, G, H, I, J, K, L, Result> function) {
      return (a, b, c, d, e, f, g, h, i, j, k, l) -> map(a, b, c, d, e, f, g, h, i, j, k, l, function);
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, Function13<A, B, C, D, E, F, G, H, I, J, K, L, M, Result> function) {
      return map(a, b, c, d, e, f, g, h, i, j, k, l, m, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Function<H, Function<I, Function<J, Function<K, Function<L, Function<M, Result>>>>>>>>>>>>> function) {
      return apply(m, map(a, b, c, d, e, f, g, h, i, j, k, l, function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, Result> Function13<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<H>>>, ErrorCatching<Expiring<Unstructured<I>>>, ErrorCatching<Expiring<Unstructured<J>>>, ErrorCatching<Expiring<Unstructured<K>>>, ErrorCatching<Expiring<Unstructured<L>>>, ErrorCatching<Expiring<Unstructured<M>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function13<A, B, C, D, E, F, G, H, I, J, K, L, M, Result> function) {
      return (a, b, c, d, e, f, g, h, i, j, k, l, m) -> map(a, b, c, d, e, f, g, h, i, j, k, l, m, function);
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, Function14<A, B, C, D, E, F, G, H, I, J, K, L, M, N, Result> function) {
      return map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Function<H, Function<I, Function<J, Function<K, Function<L, Function<M, Function<N, Result>>>>>>>>>>>>>> function) {
      return apply(n, map(a, b, c, d, e, f, g, h, i, j, k, l, m, function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, Result> Function14<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<H>>>, ErrorCatching<Expiring<Unstructured<I>>>, ErrorCatching<Expiring<Unstructured<J>>>, ErrorCatching<Expiring<Unstructured<K>>>, ErrorCatching<Expiring<Unstructured<L>>>, ErrorCatching<Expiring<Unstructured<M>>>, ErrorCatching<Expiring<Unstructured<N>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function14<A, B, C, D, E, F, G, H, I, J, K, L, M, N, Result> function) {
      return (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -> map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, function);
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, ErrorCatching<Expiring<Unstructured<O>>> o, Function15<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Result> function) {
      return map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, ErrorCatching<Expiring<Unstructured<O>>> o, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Function<H, Function<I, Function<J, Function<K, Function<L, Function<M, Function<N, Function<O, Result>>>>>>>>>>>>>>> function) {
      return apply(o, map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Result> Function15<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<H>>>, ErrorCatching<Expiring<Unstructured<I>>>, ErrorCatching<Expiring<Unstructured<J>>>, ErrorCatching<Expiring<Unstructured<K>>>, ErrorCatching<Expiring<Unstructured<L>>>, ErrorCatching<Expiring<Unstructured<M>>>, ErrorCatching<Expiring<Unstructured<N>>>, ErrorCatching<Expiring<Unstructured<O>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function15<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, Result> function) {
      return (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -> map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, function);
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, ErrorCatching<Expiring<Unstructured<O>>> o, ErrorCatching<Expiring<Unstructured<P>>> p, Function16<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Result> function) {
      return map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, ErrorCatching<Expiring<Unstructured<O>>> o, ErrorCatching<Expiring<Unstructured<P>>> p, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Function<H, Function<I, Function<J, Function<K, Function<L, Function<M, Function<N, Function<O, Function<P, Result>>>>>>>>>>>>>>>> function) {
      return apply(p, map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Result> Function16<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<H>>>, ErrorCatching<Expiring<Unstructured<I>>>, ErrorCatching<Expiring<Unstructured<J>>>, ErrorCatching<Expiring<Unstructured<K>>>, ErrorCatching<Expiring<Unstructured<L>>>, ErrorCatching<Expiring<Unstructured<M>>>, ErrorCatching<Expiring<Unstructured<N>>>, ErrorCatching<Expiring<Unstructured<O>>>, ErrorCatching<Expiring<Unstructured<P>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function16<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Result> function) {
      return (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) -> map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, function);
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, ErrorCatching<Expiring<Unstructured<O>>> o, ErrorCatching<Expiring<Unstructured<P>>> p, ErrorCatching<Expiring<Unstructured<Q>>> q, Function17<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Result> function) {
      return map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, ErrorCatching<Expiring<Unstructured<O>>> o, ErrorCatching<Expiring<Unstructured<P>>> p, ErrorCatching<Expiring<Unstructured<Q>>> q, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Function<H, Function<I, Function<J, Function<K, Function<L, Function<M, Function<N, Function<O, Function<P, Function<Q, Result>>>>>>>>>>>>>>>>> function) {
      return apply(q, map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Result> Function17<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<H>>>, ErrorCatching<Expiring<Unstructured<I>>>, ErrorCatching<Expiring<Unstructured<J>>>, ErrorCatching<Expiring<Unstructured<K>>>, ErrorCatching<Expiring<Unstructured<L>>>, ErrorCatching<Expiring<Unstructured<M>>>, ErrorCatching<Expiring<Unstructured<N>>>, ErrorCatching<Expiring<Unstructured<O>>>, ErrorCatching<Expiring<Unstructured<P>>>, ErrorCatching<Expiring<Unstructured<Q>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function17<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, Result> function) {
      return (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) -> map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, function);
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, ErrorCatching<Expiring<Unstructured<O>>> o, ErrorCatching<Expiring<Unstructured<P>>> p, ErrorCatching<Expiring<Unstructured<Q>>> q, ErrorCatching<Expiring<Unstructured<R>>> r, Function18<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Result> function) {
      return map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, ErrorCatching<Expiring<Unstructured<O>>> o, ErrorCatching<Expiring<Unstructured<P>>> p, ErrorCatching<Expiring<Unstructured<Q>>> q, ErrorCatching<Expiring<Unstructured<R>>> r, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Function<H, Function<I, Function<J, Function<K, Function<L, Function<M, Function<N, Function<O, Function<P, Function<Q, Function<R, Result>>>>>>>>>>>>>>>>>> function) {
      return apply(r, map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Result> Function18<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<H>>>, ErrorCatching<Expiring<Unstructured<I>>>, ErrorCatching<Expiring<Unstructured<J>>>, ErrorCatching<Expiring<Unstructured<K>>>, ErrorCatching<Expiring<Unstructured<L>>>, ErrorCatching<Expiring<Unstructured<M>>>, ErrorCatching<Expiring<Unstructured<N>>>, ErrorCatching<Expiring<Unstructured<O>>>, ErrorCatching<Expiring<Unstructured<P>>>, ErrorCatching<Expiring<Unstructured<Q>>>, ErrorCatching<Expiring<Unstructured<R>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function18<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, Result> function) {
      return (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) -> map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, function);
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, ErrorCatching<Expiring<Unstructured<O>>> o, ErrorCatching<Expiring<Unstructured<P>>> p, ErrorCatching<Expiring<Unstructured<Q>>> q, ErrorCatching<Expiring<Unstructured<R>>> r, ErrorCatching<Expiring<Unstructured<S>>> s, Function19<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Result> function) {
      return map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, ErrorCatching<Expiring<Unstructured<O>>> o, ErrorCatching<Expiring<Unstructured<P>>> p, ErrorCatching<Expiring<Unstructured<Q>>> q, ErrorCatching<Expiring<Unstructured<R>>> r, ErrorCatching<Expiring<Unstructured<S>>> s, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Function<H, Function<I, Function<J, Function<K, Function<L, Function<M, Function<N, Function<O, Function<P, Function<Q, Function<R, Function<S, Result>>>>>>>>>>>>>>>>>>> function) {
      return apply(s, map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Result> Function19<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<H>>>, ErrorCatching<Expiring<Unstructured<I>>>, ErrorCatching<Expiring<Unstructured<J>>>, ErrorCatching<Expiring<Unstructured<K>>>, ErrorCatching<Expiring<Unstructured<L>>>, ErrorCatching<Expiring<Unstructured<M>>>, ErrorCatching<Expiring<Unstructured<N>>>, ErrorCatching<Expiring<Unstructured<O>>>, ErrorCatching<Expiring<Unstructured<P>>>, ErrorCatching<Expiring<Unstructured<Q>>>, ErrorCatching<Expiring<Unstructured<R>>>, ErrorCatching<Expiring<Unstructured<S>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function19<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, Result> function) {
      return (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) -> map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, function);
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, ErrorCatching<Expiring<Unstructured<O>>> o, ErrorCatching<Expiring<Unstructured<P>>> p, ErrorCatching<Expiring<Unstructured<Q>>> q, ErrorCatching<Expiring<Unstructured<R>>> r, ErrorCatching<Expiring<Unstructured<S>>> s, ErrorCatching<Expiring<Unstructured<T>>> t, Function20<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Result> function) {
      return map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, curry(function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Result> ErrorCatching<Expiring<Unstructured<Result>>> map(ErrorCatching<Expiring<Unstructured<A>>> a, ErrorCatching<Expiring<Unstructured<B>>> b, ErrorCatching<Expiring<Unstructured<C>>> c, ErrorCatching<Expiring<Unstructured<D>>> d, ErrorCatching<Expiring<Unstructured<E>>> e, ErrorCatching<Expiring<Unstructured<F>>> f, ErrorCatching<Expiring<Unstructured<G>>> g, ErrorCatching<Expiring<Unstructured<H>>> h, ErrorCatching<Expiring<Unstructured<I>>> i, ErrorCatching<Expiring<Unstructured<J>>> j, ErrorCatching<Expiring<Unstructured<K>>> k, ErrorCatching<Expiring<Unstructured<L>>> l, ErrorCatching<Expiring<Unstructured<M>>> m, ErrorCatching<Expiring<Unstructured<N>>> n, ErrorCatching<Expiring<Unstructured<O>>> o, ErrorCatching<Expiring<Unstructured<P>>> p, ErrorCatching<Expiring<Unstructured<Q>>> q, ErrorCatching<Expiring<Unstructured<R>>> r, ErrorCatching<Expiring<Unstructured<S>>> s, ErrorCatching<Expiring<Unstructured<T>>> t, Function<A, Function<B, Function<C, Function<D, Function<E, Function<F, Function<G, Function<H, Function<I, Function<J, Function<K, Function<L, Function<M, Function<N, Function<O, Function<P, Function<Q, Function<R, Function<S, Function<T, Result>>>>>>>>>>>>>>>>>>>> function) {
      return apply(t, map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, function));
    }
    
    public static <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Result> Function20<ErrorCatching<Expiring<Unstructured<A>>>, ErrorCatching<Expiring<Unstructured<B>>>, ErrorCatching<Expiring<Unstructured<C>>>, ErrorCatching<Expiring<Unstructured<D>>>, ErrorCatching<Expiring<Unstructured<E>>>, ErrorCatching<Expiring<Unstructured<F>>>, ErrorCatching<Expiring<Unstructured<G>>>, ErrorCatching<Expiring<Unstructured<H>>>, ErrorCatching<Expiring<Unstructured<I>>>, ErrorCatching<Expiring<Unstructured<J>>>, ErrorCatching<Expiring<Unstructured<K>>>, ErrorCatching<Expiring<Unstructured<L>>>, ErrorCatching<Expiring<Unstructured<M>>>, ErrorCatching<Expiring<Unstructured<N>>>, ErrorCatching<Expiring<Unstructured<O>>>, ErrorCatching<Expiring<Unstructured<P>>>, ErrorCatching<Expiring<Unstructured<Q>>>, ErrorCatching<Expiring<Unstructured<R>>>, ErrorCatching<Expiring<Unstructured<S>>>, ErrorCatching<Expiring<Unstructured<T>>>, ErrorCatching<Expiring<Unstructured<Result>>>> map(Function20<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, Result> function) {
      return (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) -> map(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, function);
    }
    // GENERATED CODE END
}
