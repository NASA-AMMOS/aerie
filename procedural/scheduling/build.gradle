import org.jetbrains.kotlin.gradle.dsl.jvm.JvmTargetValidationMode
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask

plugins {
  id "org.jetbrains.kotlin.jvm" version "2.0.20"
  id 'java-library'
  id 'org.jetbrains.dokka' version '1.9.20'
  id 'maven-publish'
}

repositories {
  mavenCentral()
}

dependencies {
  implementation project(':procedural:timeline')
  implementation project(':merlin-driver')
  implementation project(':type-utils')

  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
  testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
  testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

tasks.withType(KotlinJvmCompile.class).configureEach {
  jvmTargetValidationMode = JvmTargetValidationMode.WARNING
}

tasks.named('test') {
  useJUnitPlatform()
}

kotlin {
  jvmToolchain(21)
}

tasks.named('compileKotlin', KotlinCompilationTask) {
  compilerOptions {
    freeCompilerArgs.add("-Xjvm-default=all")
  }
}

java {
  withJavadocJar()
  withSourcesJar()
}

var timelineSource = "${project(":procedural:timeline").projectDir}/src/main/kotlin"

dokkaHtmlPartial.configure {
  dokkaSourceSets {
    configureEach {
      // used as project name in the header
      moduleName.set("Scheduling")

      reportUndocumented.set(true)

      // contains descriptions for the module and the packages
      includes.from("MODULE_DOCS.md")

      sourceRoots.from(timelineSource)
      suppressedFiles.from(timelineSource)
    }
  }
}

publishing {
  publications {
    library(MavenPublication) {
      version = findProperty("publishing.version")
      from components.java
    }
  }

  publishing {
    repositories {
      maven {
        name = findProperty("publishing.name")
        url = findProperty("publishing.url")
        credentials {
          username = System.getenv(findProperty("publishing.usernameEnvironmentVariable"))
          password = System.getenv(findProperty("publishing.passwordEnvironmentVariable"))
        }
      }
    }
  }
}
